res := td.db.Model(task.Task{}).Where("tasks.id = ? AND tasks.user_id = ?", id, user_id).Select("tasks.id as ID, tasks.created_at as CreatedAt, tasks.updated_at as UpdatedAt, tasks.name as Name, tasks.project_id as Project_id,tasks.priority as Priority ,projects.name as Project_name").Joins("inner join projects on projects.id = tasks.project_id").First(&taskResp)

	if 


taskRespArr := []response.TaskResponse{}

	res := bd.db.Model(task.Task{}).Select("tasks.id as ID, tasks.created_at as CreatedAt, tasks.updated_at as UpdatedAt, tasks.name as Name, tasks.project_id as Project_id,tasks.priority as Priority ,projects.name as Project_name").Joins("inner join projects on projects.id = tasks.project_id").Find(&taskRespArr)
	if res.RowsAffected == 0 {
		return nil, errors.New(gorm.ErrRecordNotFound.Error())
	}
	return taskRespArr, nil


  userResp := response.UserResponse{}

	res := ud.db.Model(&user.User{}).Where("id = ?", id).First(&userResp)

	if res.RowsAffected == 0 {
		return response.UserResponse{}, res.Error
	}


  project := []proResp.ProResponse{}

	resPro := ud.db.Model(&user.User{}).Where("users.id = ?", id).Select("projects.id as Id, projects.created_at as Created_at, projects.updated_at as Updated_at, projects.name as Name").Joins("inner join projects on projects.user_id = users.id").Find(&project)

	if resPro.Error != nil {
		return userResp, resPro.Error
	}
	userResp.Projects = project